%TOC%

---+ Tau Ntuples

---++ Code
Currently under rapid development!  Has only been tested with 331.

=addpkg RecoTauTag/TauAnalysisTools V00-03-05=

---++ Why ntuples?

The software was originally written for the purpose of determining tau fake
rates from data.  The original approach involved creating numerator/denominator
histograms for different tau discriminator selections.  The large combinatorics
of different discriminator orders/combination quickly made this approach
unfeasible.  A solution was sought to provide some kind of ntuple solution for
taus so that the many complex relationships and correlations between tau
quantities could be explored quickly, without having to rerun a crab job each
time the requirements changed.  The TauNtuple producer makes EDM ntuples 
(see SWGuideEDMNtuple) so production is CRAB friendly and the user can
preserve all the relevant information in the event. 

---++ Framework Design
The main requirements (at least for me) when evaluating tau performance are

   * Matching to MC (of different types!)
   * Getting kinematic information for RECO/truth
   * Getting the tau discriminator results

Note that we are always dealing with both Calo & PFTaus.

The Tau ntuple collection operates on the following collections:

   * A source collection that is compatible with =View<Candidate>=  
   * A matching collection, of =CandViewMatchMap=.  (See SWGuideCandidateModules#TrivialDeltaRMatcher)
   * A set of PF/CaloTau discriminators corresponding to the source collection.

The TauNtupleProducer produces a collection of =vector<floats>= in the event.
Each of these can be though of as an ntuple column, and each entry in the
vector is a row.  

---+++ Source Collection Variables

The TauNtupleProducer parameter 'expressions' which are string expression
objects. (See SWGuideStringCutParser)  You can you use any expression that is
compatible with the data type specified in the configuration.  Each expression
will become another column in the ntuple.

%SYNTAX{ syntax="python" }%
dataType = cms.string("PFTau")
expressions = cms.PSet(
      pt = cms.string("pt()"),
      eta = cms.string("abs(eta())"),
      jet_pt = cms.string("pfTauTagInfoRef().pfjetRef().pt()")
)
%ENDSYNTAX%

---+++ Matching
You
There are there modes available for matching.  
   * =none= - no matching is performed, a row is created for each object in the source collection.
   * =matched= - only the source objects that are matched in the match map
    become rows.
   * =unmatched= - only the source objects that are *not* matched in the match
     become rows.

If the =matched= option is selected, columns corresponding to expressions on
the truth objects are available. 

%SYNTAX{ syntax="python" }%
matchingOption = cms.string("matched"), # 'none', 'matched', 'unmatched'
matchingSource = cms.InputTag("shrinkingConePFTau2trueHadronicTaus")
matchedType = cms.string("GenJet")
expressions = cms.PSet(
      pt = cms.string("pt()"),
      eta = cms.string("abs(eta())"),
      jetEtaWidth = cms.string("etaetaMoment()")
)
%ENDSYNTAX%

Note that you are not limited to GenJets!  You can match to any collection that
is compatible with =View<Candidate>=.

---+++ Discriminators

A collection of PF/CaloTau discriminators can be applied to the source
collection.  Each discriminator will become a column in output ntuple.

%SYNTAX{ syntax="python" }%
discriminators = cms.PSet(
   ByLeadTrackPt    = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackPtCut"),
   ByIsolation      = cms.InputTag("shrinkingConePFTauDiscriminationByIsolation"),
)

%ENDSYNTAX%
---++ Examples

All of these are variations on the prototype 

---++++ Get the pt and eta of all true hadronic taus
%TWISTY{id="Simple_example" mod="div" showlink="Example&nbsp;" hidelink="Less&nbsp;" remember="off" showimgright="%ICONURLPATH{toggleopen-small}%" hideimgright="%ICONURLPATH{toggleclose-small}%" start="hide" }% 
%SYNTAX{ syntax="python" }%
# Produces a collection GenJets
from RecoTauTag.TauAnalysisTools.truthTools_cfi import trueHadronicTaus

trueTauNtuple = cms.EDProducer("TauNtupleProducer",
      source         = cms.InputTag("trueHadronicTaus"),
      alias          = cms.string("mcTruth"),
      dataType       = cms.string("GenJet"),
      matchingOption = cms.string("none"), # we just want a flat list 
      expressions    = cms.PSet(
         pt = cms.string("pt()"),
         eta = cms.string("eta()")
      ),
      discriminators = cms.PSet()
)
%ENDSYNTAX%
%ENDTWISTY%

---++++ Pt and eta of matched shrinking cone taus
%TWISTY{id="Matching_example" mod="div" showlink="Example&nbsp;" hidelink="Less&nbsp;" remember="off" showimgright="%ICONURLPATH{toggleopen-small}%" hideimgright="%ICONURLPATH{toggleclose-small}%" start="hide" }% 
%SYNTAX{ syntax="python" }%
# Build matching
shrinkingCone2trueHadronicTaus = cms.EDProducer("TrivialDeltaRViewMatcher",
      src = cms.InputTag("shrinkingConePFTauProducer"),
      matched = cms.InputTag("trueHadronicTaus"),
      distMin = cms.double(0.1)
)

matchedShrinkingConeTaus = cms.EDProducer("TauNtupleProducer",
      source   = cms.InputTag("shrinkingConePFTauProducer"),
      alias    = cms.string("shrinking"),
      dataType = cms.string("PFTau"),

      expressions = cms.PSet(
         pt  = cms.string("pt()"),
         eta = cms.string("eta()"),
         nTrks = cms.string("signalTracks().size()"),
      ),

      discriminators = cms.PSet(
         ByLeadTrackPt    = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackPtCut"),
      ),

      # Define matching
      matchingOption = cms.string("matched"),
      matchingSource = cms.InputTag("shrinkingConePFTau2trueHadronicTaus"),
      matchedType = cms.string("GenJet"),

      matched_expressions = cms.PSet(
         pt = cms.string("pt()"),
         eta = cms.string("eta()"),
      )
)

%ENDSYNTAX%
%ENDTWISTY%

---++++ FWLite access

Tau ntuples are easy to plot!  In an output file where the above two expamples
have been run, you can do the following in FWlite.

%TWISTY{id="FWLite_example" mod="div" showlink="Example&nbsp;" hidelink="Less&nbsp;" remember="off" showimgright="%ICONURLPATH{toggleopen-small}%" hideimgright="%ICONURLPATH{toggleclose-small}%" start="hide" }% 
%SYNTAX{ syntax="cpp" }%

// Plot the pt of truth objects, within eta < 2.5
Events->Draw("mcTruth#pt", "abs(mcTruth#eta) < 2.5");

// Plot the pt of reco objects (matched to truth)
Events->Draw("shrinking#matched#pt")

// Histogram the pt of the *true* taus (the 'ref') that are associated to each
// reco tau, when the true tau was in the eta acceptance.  The matching
// efficiency numerator.
Events->Draw("shrinking#matched#ref#pt", "abs(shrinking#matched#ref#eta) < 2.5")

// Now plot the matched truth pt for reco taus that also pass isolation
Events->Draw("shrinking#matched#ref#pt", 
      "abs(shrinking#matched#ref#eta) < 2.5 && shrinking#matched#ByIsolation")

// In another direction, plot the pt resolution of our matched taus
Events->Draw("shrinking#matched#ref#pt - shrinking#matched#pt")

%ENDSYNTAX%
%ENDTWISTY%

---+++ Helpful tools

Not yet documented, but check out 

=RecoTauTag.TauAnalysisTools.tools.ntupleTools= 

for automated matching and ntuple creation.

---++ Plotting tools

Utilities for analyzing the ntuples in PyROOT are defined in:
=RecoTauTag.TauAnalysisTools.tools.ntauples=.  The main purpose of tools is to
lessen the pain of typing out the long branch names in CINT.  There are two
main interfaces: the !TauNtupleManager and the !TauNtupleClasses.  The
!TauNtupleManger takes as input the =Events= branch from a ROOT file and parses
it to find all the available tau ntuples.  Each ntuple is represented by a
!TauNtuple.  A TauNtuple corresponds to =tauType=, and as such may contain
different collections such as truth, matched, unmatched, etc. Each of these is
essentailly a sub-ntuple, with the exception of the truth and matched ntuples,
which have an obvious correspondance.  The TauNtuple class essentially does the following: 
   * Manages which collection to use (matched/unmatched etc)
   * Keeps a list of available variables (ntuple columns)
   * Translates names 
      * =shrinking#matched#eta -> $pt=
      * =shrinking#matched#ref#pt -> $truth_pt=

After the user initializes the NtupleManger and Ntuple class, utility functions use 
the name translations.
%SYNTAX{ syntax="python" }%

#  ====  DRAWING HISTOGRAMS ====
# events is the 'Events' branch from a EDM TTree, ntuple is the TauNtuple we've created
my_histo = draw(events, ntuple, 
     expr='$pt',                   # Draw pt of set collection for events 
     selection="abs($eta) < 1.1",  # with |eta| < 2.1, 
     output_hist="my_hist",        # storing the result in my_hist 
     binning=(20, 0, 30),          # in 20 bins from pt = 0 to pt = 30
     options="goff")               # and don't draw to the screen.

my_histo.Draw()
c1.SaveAs("barrel_pt.png")

# ==== DRAWING EFFICIENCIES ====
# The efficiency function returns two objects (in a tuple):
#   * a TGraphAsymmErrors with the eff + erros
#   * a blank histogram with appropriate axes & range
bkg_histo, eff = efficiency(events, ntuple, 
     expr='$pt',                   # Draw efficiency. vs. pt for
     numerator="$ByTaNCfrOne",     # taus passing TaNC @ 1%
     denominator="",               # w.r.t. all taus (no selection)
     output_eff="my_eff",          # storing the result in my_eff
     binning=(20, 0, 30),          # in 20 bins from pt = 0 to pt = 30
     options="goff")               # and don't draw to the screen.

bkg_histo.Draw() # Draw the blank background for the TGraph
eff.Draw() # overlay the efficiency
c1.SaveAs("TaNCOnePerEff.png")
%ENDSYNTAX%

---+++ A full example_plot.py

This example is also available in:

[[[%CMSSWCVS%/RecoTauTag/TauAnalysisTools/test/ntauples_example.py%HEAD%][RecoTauTag/TauAnalysisTools/test/ntauples_example.py]]

%TWISTY{id="ntauples_example" mod="div" showlink="Full example&nbsp;" hidelink="Less&nbsp;" remember="off" showimgright="%ICONURLPATH{toggleopen-small}%" hideimgright="%ICONURLPATH{toggleclose-small}%" start="hide" }% 
%SYNTAX{ syntax="python" }%

''' 
ntauples_example.py

Author: Evan K. Friis, UC Davis
'''
# Load ntauple tools
from RecoTauTag.TauAnalysisTools.tools.ntauples import *

# Load FWLite libraries (prevents warnings)
from PhysicsTools.PythonAnalysis import *
from ROOT import *
gSystem.Load("libFWCoreFWLite.so")
AutoLibraryLoader.enable()
gROOT.SetBatch(True)

# Single file example
#my_file = TFile("ntuple.root")
#events = my_file.Get("Events")

#Multiple files
events = TChain("Events")
events.AddFile("/afs/cern.ch/user/f/friis/public/ntauple_example/ntuple.root")
#events.AddFile("ntuple_*.root")  etc...

# Get all the ntuples available
ntuple_manager = TauNtupleManager(events)

# Print a list of available ntuples:
ntuple_manager.printNtuples()
''' Example output:

Available ntuples:
        fixedConePFTau
        shrinkingConePFTau

'''

# Select an ntuple to use
shrinking_ntuple = ntuple_manager.shrinkingConePFTau

# Print information about this ntuple and it's available variables
print shrinking_ntuple
''' Example output:

 * Ntuple: shrinkingConePFTau
 * Collection "ref" 
 * ------ pt 
 * Collection "matched" 
 * ------ AgainstElectron 
 * ------ AgainstMuon 
 * ------ ByEcalIsolation 
 * ------ ByIsolation 
 * ------ ByLeadPionPt 
 * ------ ByLeadTrack 
 * ------ ByLeadTrackPt 
 * ------ ByTaNCRaw 
 * ------ ByTaNCfrHalf 
 * ------ ByTaNCfrOne 
 * ------ ByTaNCfrQuarter 
 * ------ ByTaNCfrTenth 
 * ------ ByTrackIsolation 
 * ------ DecayMode 
 * ------ charge 
 * ------ eta 
 * ------ jetEta 
 * ------ jetPt 
 * ------ jetWidth 
 * ------ mass 
 * ------ nTrks 
 * ------ phi 
 * ------ pt 
 * ------ matchedIndex
'''

# Note the special "ref" collection.  This is the collection that was matching source
# and is avaialbe when the colleciton is "matched" by prepending "$ref_" to the variable name.

# Now we know what our ntuples are, the available collections, are and what
# variables we have.  Let's make some plots!

# Set which collection to use.  Our only options right now are "ref" or
# "matched".  Let's used 'matched'.  In this case, these are reco taus that
# were matched to gen-level hadronic taus.
shrinking_ntuple.set_collection("matched")

# Let's draw the pt resolution.
pt_res = draw(
    events,                 # the events branch
    shrinking_ntuple,       # which ntuple to use
    expr="$pt - $ref_pt",   # pt - true pt
    selection="abs($eta) < 2.1", # only look at the eta < 2.1
    output_hist="pt_res",   # If we want to save this histo in the root file.
    binning=(20, 0, 10),    # Same format as THXF
)

c1 = TCanvas()
pt_res.Draw()
pt_res.SetTitle("Pt resolution")
c1.SaveAs("pt_res.png")

# Now let's draw the TaNC efficiency vs. pt, for taus with pt > 15.  The
# efficiency function returns a tuple containing both the efficiency
# TGraphAsymmErrors and a convienent blank histogram to serves as the
# background for the TGraph

bkg, my_eff = efficiency(
                        events, 
                        shrinking_ntuple,
                        expr="$pt",
                        numerator="$ByTaNCfrOne && $pt > 15",
                        denominator="$pt > 15",
                        output_eff="iso_eff",
                        binning=(20, 0, 60))

bkg.Draw()
my_eff.Draw()
c1.SaveAs("pt_eff_TaNC.png")



%ENDSYNTAX%
%ENDTWISTY%




